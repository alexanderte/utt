// Generated by CoffeeScript 1.6.2
(function() {
  define(['jquery', 'underscore', 'backbone'], function($, _, Backbone) {
    return Backbone.View.extend({
      el: '#test-view',
      initialize: function() {
        this.model.bind('change:state', this.render, this);
        return this.options.router.bind('all', function(route, currentTest) {
          if (route === 'route:test') {
            this.model.set('currentTest', currentTest === void 0 ? 0 : parseInt(currentTest));
            this.render();
            if (this.model.get('currentTest') === 0) {
              return this.$el.slideDown();
            } else {
              return this.$el.show();
            }
          } else {
            return this.$el.hide();
          }
        }, this);
      },
      render: function() {
        var answers, test;

        if (this.model.get('state') === 'error') {
          return this.$el.html(_.template($('#test-error').html(), {
            'webPage': this.model.get('webPage')
          }));
        } else if (this.model.get('state') === 'loading') {
          return this.$el.html(_.template($('#test-loading').html(), {
            'webPage': this.model.get('webPage')
          }));
        } else if (this.model.getCurrentTest() === void 0) {
          return this.$el.html(_.template($('#test-nothing-to-test').html(), {
            'webPage': this.model.get('webPage')
          }));
        } else {
          test = this.model.getCurrentTest();
          console.log(test.get('answers'));
          answers = _.map(test.get('answers'), function(a) {
            return {
              value: a,
              _value: this.model.translate('test_answer_' + a)
            };
          });
          console.log(answers);
          this.$el.html(_.template($('#test-progress').html(), {
            'progress': this.model.progress()
          }) + _.template($(test.get('template')).html(), {
            '_question': this.model.translate('test_question_' + test.get('testId') + '-' + test.get('testResultId'), test.get('questionValues')),
            '_previousTest': this.model.translate('test_previous_test'),
            '_skipTest': this.model.translate('test_skip_test'),
            'answers': answers,
            'nextUrl': this.nextUrl(),
            'previousUrl': this.previousUrl(),
            'previousExtraClass': this.previousExtraClass()
          }));
          return $('html, body').animate({
            scrollTop: 0
          }, 'fast');
        }
      },
      previousExtraClass: function() {
        if (this.model.isAtFirst() === true) {
          return 'disabled';
        }
      },
      previousUrl: function() {
        if (this.model.isAtFirst() === true) {
          return '#test/' + (this.model.get('currentTest'));
        } else {
          return '#test/' + (this.model.get('currentTest') - 1);
        }
      },
      nextUrl: function() {
        if (this.model.isAtLast() === true) {
          return '#result';
        } else {
          return '#test/' + (this.model.get('currentTest') + 1);
        }
      },
      events: {
        'click input#answer': 'clickAnswer'
      },
      clickAnswer: function(el) {
        return this.model.setAnswer($('input#answer:checked').val());
      }
    });
  });

}).call(this);
