// Generated by CoffeeScript 1.6.2
(function() {
  define(['jquery', 'underscore', 'backbone'], function($, _, Backbone) {
    return Backbone.View.extend({
      el: '#result-view',
      events: {
        'change #hideAutomatedCheckerResults': 'clickDim'
      },
      initialize: function() {
        this.render();
        this.options.router.bind('all', function(route) {
          if (route === 'route:result') {
            return this.$el.show();
          } else {
            return this.$el.hide();
          }
        }, this);
        this.options.locale.on('change:locale', this.render, this);
        this.options.testRun.bind('change:state', this.render, this);
        return this.options.testRun.on('change:answer', this.render, this);
      },
      render: function() {
        var checked, results, testIndex, that;

        if (this.options.testRun.get('state') === 'error') {
          return this.$el.html(_.template($('#result-template-error').html(), {
            webPage: this.options.testRun.get('webPage')
          }));
        } else if (this.options.testRun.get('state') === 'loading') {
          return this.$el.html(_.template($('#result-template-loading').html(), {
            webPage: this.options.testRun.get('webPage')
          }));
        } else {
          that = this;
          results = [];
          testIndex = 0;
          _.each(this.options.testRun.get('tests').models, function(element, index, list) {
            results.push(that.transformResult(element.attributes, testIndex, that.options.testRun.testCount(), that));
            if (element.attributes.category === 'verify') {
              return testIndex++;
            }
          });
          checked = '';
          if (this.shouldHideAutomatedCheckerResults()) {
            checked = 'checked="checked"';
          }
          return this.$el.html(_.template($('#result-template').html(), {
            tests: results,
            checked: checked,
            _resultsForWebPage: this.options.locale.translate('result_results_for_web_page', this.options.testRun.get('webPage')),
            _hideAutomated: this.options.locale.translate('result_hide_automated'),
            _category: this.options.locale.translate('result_category'),
            _line: this.options.locale.translate('result_line'),
            _column: this.options.locale.translate('result_column'),
            _testId: this.options.locale.translate('result_test_id'),
            _testResultId: this.options.locale.translate('result_test_result_id'),
            _testTitle: this.options.locale.translate('result_test_title'),
            _answer: this.options.locale.translate('result_answer'),
            _answer_auto: this.options.locale.translate('result_answer_auto')
          }));
        }
      },
      transformResult: function(result, testIndex, testCount, that) {
        if (result.line === 0) {
          result.line = '–';
        }
        if (result.column === 0) {
          result.column = '–';
        }
        if (result.category !== 'verify') {
          result._answer = this.options.locale.translate('result_answer_auto');
          if (that.shouldHideAutomatedCheckerResults()) {
            result.dimClass = 'dim';
          } else {
            result.dimClass = '';
          }
        } else {
          if (!result.answer) {
            result._answer = '–';
          } else {
            result._answer = this.options.locale.translate('test_answer_' + result.answer);
          }
        }
        if (result.category === 'verify' && testIndex < testCount) {
          result.testTitle = '<a href="' + window.location.href.split('#')[0] + '#test/' + testIndex + '">' + result.testTitle + '</a>';
        }
        result._category = this.options.locale.translate('result_category_' + result.category);
        return result;
      },
      shouldHideAutomatedCheckerResults: function() {
        return document.getElementById('hideAutomatedCheckerResults') === null || $('#hideAutomatedCheckerResults').is(':checked');
      },
      clickDim: function(el) {
        return this.render();
      }
    });
  });

}).call(this);
