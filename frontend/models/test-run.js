// Generated by CoffeeScript 1.6.2
(function() {
  define(['backbone', 'socketio', 'collections/tests'], function(Backbone, io, Tests) {
    return Backbone.Model.extend({
      defaults: {
        'webPage': 'http://www.tingtun.no/',
        'currentTest': 0,
        'state': 'loading',
        'tests': []
      },
      initialize: function(socket) {
        var that;

        _.extend(this, Backbone.Events);
        this.set('socket', socket);
        socket.emit('get tests', this.get('webPage'));
        that = this;
        socket.on('tests', function(data) {
          if (data === null) {
            return that.set('state', 'error');
          } else {
            that.set('tests', new Tests(data));
            return that.set('state', 'loaded');
          }
        });
        return this.bind('change:webPage', this.fetchTests, this);
      },
      verifyTests: function() {
        return this.get('tests').where({
          category: 'verify'
        });
      },
      nextTest: function() {
        return this.set('currentTest', this.get('currentTest') + 1);
      },
      previousTest: function() {
        return this.set('currentTest', this.get('currentTest') - 1);
      },
      getCurrentTest: function() {
        if (this.get('tests').length === 0) {
          return null;
        } else {
          return this.verifyTests()[this.get('currentTest')];
        }
      },
      fetchTests: function() {
        this.set('state', 'loading');
        return this.get('socket').emit('get tests', this.get('webPage'));
      },
      testCount: function() {
        return Math.min(this.verifyTests().length, 10);
      },
      progress: function() {
        return parseInt((this.get('currentTest') / (this.testCount() - 1)) * 100);
      },
      isAtLast: function() {
        return this.get('currentTest') === (this.testCount() - 1);
      },
      isAtFirst: function() {
        return this.get('currentTest') === 0;
      },
      setAnswer: function(answer) {
        return this.verifyTests()[this.get('currentTest')].set('answer', answer);
      },
      setWebPage: function(url) {
        var addProtocol;

        addProtocol = function(url) {
          if (url.substring(0, 7) !== 'http://' && url.substring(0, 8) !== 'https://') {
            return 'http://' + url;
          } else {
            return url;
          }
        };
        return this.set('webPage', addProtocol(url));
      }
    });
  });

}).call(this);
