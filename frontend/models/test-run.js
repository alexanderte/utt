// Generated by CoffeeScript 1.6.2
(function() {
  define(['backbone', 'socketio', 'collections/tests', 'jquery', 'jed'], function(Backbone, io, Tests, $) {
    return Backbone.Model.extend({
      defaults: {
        'webPage': 'http://www.tingtun.no/',
        'currentTest': 0,
        'state': 'loading',
        'language': 'en',
        'route': 'home',
        'jed': void 0
      },
      foo: function() {
        return 'bar';
      },
      verifyTests: function() {
        return this.get('tests').where({
          category: 'verify'
        });
      },
      nextTest: function() {},
      previousTest: function() {},
      getCurrentTest: function() {
        return this.verifyTests()[this.get('currentTest')];
      },
      updateLanguage: function(thisArg, callback) {
        var that;

        that = this;
        return $.getJSON('locale/' + that.get('language') + '.json', function(data) {
          console.log(1);
          that.set('jed', new Jed({
            locale_data: {
              messages: data[that.get('language')]
            }
          }));
          console.log(that.get('jed').translate('question_SC3.1.2-2-11').fetch(['foo', 'bar', 'baz']));
          if (callback) {
            return callback.apply(thisArg);
          }
        });
      },
      initialize: function(socket) {
        _.extend(this, Backbone.Events);
        console.log(0);
        return this.updateLanguage(this, function() {
          var that;

          console.log(2);
          this.set('socket', socket);
          this.set('tests', []);
          socket.emit('get tests', this.get('webPage'));
          that = this;
          socket.on('tests', function(data) {
            if (data === null) {
              return that.set('state', 'error');
            } else {
              that.set('tests', new Tests(data));
              return that.set('state', 'loaded');
            }
          });
          this.bind('change:webPage', this.fetchTests, this);
          return this.trigger('appLoaded');
        });
      },
      fetchTests: function() {
        this.set('state', 'loading');
        return this.get('socket').emit('get tests', this.get('webPage'));
      },
      testCount: function() {
        return Math.min(this.verifyTests().length, 10);
      },
      progress: function() {
        return parseInt((this.get('currentTest') / (this.testCount() - 1)) * 100);
      },
      isAtLast: function() {
        return this.get('currentTest') === (this.testCount() - 1);
      },
      isAtFirst: function() {
        return this.get('currentTest') === 0;
      },
      setAnswer: function(answer) {
        return this.verifyTests()[this.get('currentTest')].set('answer', answer);
      },
      setWebPage: function(url) {
        var addProtocol;

        addProtocol = function(url) {
          if (url.substring(0, 7) !== 'http://' && url.substring(0, 8) !== 'https://') {
            return 'http://' + url;
          } else {
            return url;
          }
        };
        return this.set('webPage', addProtocol(url));
      },
      setLanguage: function(languageCode) {
        console.log(languageCode);
        this.set('language', languageCode);
        return this.updateLanguage(this, function() {
          return this.trigger('languageUpdated');
        });
      },
      translate: function(str, args) {
        console.log('str');
        console.log(str);
        return this.get('jed').translate(str).fetch(args);
      }
    });
  });

}).call(this);
