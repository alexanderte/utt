// Generated by CoffeeScript 1.3.3
(function() {
  var camelCase, csv, parseResultDetails, request, requestUrl, resultType, testNameToQuestion, toTestObject, toUserTests, translateLanguageCode, util, _;

  request = require('request');

  util = require('util');

  csv = require('csv');

  _ = require('underscore');

  requestUrl = function(webPageUrl) {
    return 'http://accessibility.egovmon.no/en/pagecheck2.0/?url=' + encodeURIComponent(webPageUrl) + '&export=occurences';
  };

  translateLanguageCode = function(languageCode) {
    switch (languageCode) {
      case 'en-US':
        return 'English';
      default:
        return 'Unknown';
    }
  };

  exports.checkWebPage = function(webPageUrl, callback) {
    return request(requestUrl(webPageUrl), function(error, response, body) {
      var rows;
      if (error !== null) {
        callback(error);
      }
      rows = [];
      return csv().from(body).transform(function(data) {
        return rows.push(data);
      }).on('end', function() {
        var row, _i, _len;
        rows = _.map(_.rest(rows), toTestObject);
        for (_i = 0, _len = rows.length; _i < _len; _i++) {
          row = rows[_i];
          if (row.resultDetails.languageCode != null) {
            row.resultDetails.language = translateLanguageCode(row.resultDetails.languageCode);
          }
        }
        return callback(null, toUserTests(rows));
      });
    });
  };

  camelCase = function(str) {
    var result, word, words, _i, _len;
    result = '';
    words = str.toLowerCase().split(' ');
    result = words.shift();
    for (_i = 0, _len = words.length; _i < _len; _i++) {
      word = words[_i];
      result += word[0].toUpperCase() + word.substr(1);
    }
    return result;
  };

  parseResultDetails = function(column) {
    var keyValue, lineColumn, parts, result, _i, _len, _ref;
    result = {};
    _ref = column.split(' | ');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      keyValue = _ref[_i];
      parts = keyValue.split(': ', 2);
      if (parts[0].lastIndexOf('At line ', 0) === 0) {
        result['specifiedElement'] = {};
        result['specifiedElement']['codeExtract'] = parts[1];
        lineColumn = parts[0].split(' ');
        result['specifiedElement']['line'] = parseInt(lineColumn[2]);
        result['specifiedElement']['column'] = parseInt(lineColumn[4]);
      } else if (parts[0] === 'The language is set to') {

      } else {
        result[camelCase(parts[0])] = parts[1];
      }
    }
    return result;
  };

  toTestObject = function(row) {
    return {
      line: parseInt(row[2]),
      column: parseInt(row[3]),
      successCriterion: row[4],
      test: row[5],
      result: row[6],
      resultDescription: row[7],
      resultDetails: parseResultDetails(row[8])
    };
  };

  testNameToQuestion = function(row) {
    switch (row.test) {
      case 'Providing descriptive titles for web pages':
        return 'Does the title “' + row.resultDetails.pageTitle + '” describe the content of the page?';
      case 'Specifying language changes in the content':
        return 'Does the text “' + row.resultDetails.checkedText + '” correlate with the specified language ' + row.resultDetails.language + '?';
      case 'Providing descriptive headings':
        return 'Does the heading “' + row.resultDetails.heading + '” describe the section that it belongs to?';
      case 'Making the link purpose identifiable':
        return 'Does the link text “' + row.resultDetails.linkText + '” describe the link purpose?';
      case 'Specifying language changes in the content':
        return 'Does the link text “' + row.resultDetails.linkText + '” describe the link purpose?';
    }
  };

  resultType = function(result) {
    if (result.lastIndexOf('Verification', 0) === 0) {
      return 'verify';
    } else if (result.lastIndexOf('Failed', 0) === 0) {
      return 'fail';
    } else {
      return 'pass';
    }
  };

  toUserTests = function(rows) {
    var row, userTest, userTests, _i, _len;
    userTests = [];
    for (_i = 0, _len = rows.length; _i < _len; _i++) {
      row = rows[_i];
      if (resultType(row.result) === 'verify') {
        userTest = {};
        userTest.question = testNameToQuestion(row);
        userTests.push(userTest);
      }
    }
    return userTests;
  };

}).call(this);
